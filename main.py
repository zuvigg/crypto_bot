import io

import requests
import time
import telebot
from binance.client import Client
import os
from dotenv import load_dotenv
from matplotlib import pyplot as plt

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()

BINANCE_API_KEY = os.getenv("BINANCE_API_KEY")
BINANCE_SECRET_KEY = os.getenv("BINANCE_SECRET_KEY")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = "977501740"

# –ü–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –≤ % –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏
PRICE_CHANGE_THRESHOLD = 3.0
CHECK_INTERVAL = 60

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
binance_client = Client(BINANCE_API_KEY, BINANCE_SECRET_KEY)
telegram_bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
def send_telegram_message(message):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {"chat_id": TELEGRAM_CHAT_ID, "text": message}
    requests.post(url, json=payload)

# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
send_telegram_message("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç —Ä—ã–Ω–æ–∫!")

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –∞–∫—Ç–∏–≤–∞
def get_price(symbol):
    try:
        ticker = binance_client.get_symbol_ticker(symbol=symbol)
        return f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ {symbol}: {ticker['price']} USDT"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã: {e}"


# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã 10 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥
def get_price_10m_ago(symbol):
    try:
        klines = binance_client.get_klines(symbol=symbol, interval=Client.KLINE_INTERVAL_1MINUTE, limit=10)
        return float(klines[0][1])  # –û—Ç–∫—Ä—ã—Ç–∞—è —Ü–µ–Ω–∞ 10 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥
    except Exception as e:
        return None

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –∞–∫—Ç–∏–≤–∞
def get_price(symbol):
    try:
        ticker = binance_client.get_symbol_ticker(symbol=symbol)
        return float(ticker['price'])
    except Exception as e:
        return None

# –§—É–Ω–∫—Ü–∏—è —Ç—Ä–µ–Ω–¥–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∏–Ω—É—Ç
def get_trend_last(n):
    tickers = binance_client.get_ticker()
    symbols = [t['symbol'] for t in tickers if t['symbol'].endswith("USDT")]
    changes = []

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è
    progress_response = requests.post(f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage", json={
        "chat_id": TELEGRAM_CHAT_ID,
        "text": "üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä—ã–Ω–æ–∫... 0%"
    })

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
    progress_data = progress_response.json()
    message_id = progress_data.get("result", {}).get("message_id")
    total = len(symbols)

    for i, symbol in enumerate(symbols):
        old_price = get_price_10m_ago(symbol)
        current_price = get_price(symbol)

        if old_price and current_price:
            price_change = ((current_price - old_price) / old_price) * 100
            changes.append((symbol, price_change))

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        progress_percent = int((i + 1) / total * 100)
        if progress_percent % 5 == 0:  # –û–±–Ω–æ–≤–ª—è—Ç—å –∫–∞–∂–¥—ã–µ 10%
            requests.post(f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/editMessageText", json={
                "chat_id": TELEGRAM_CHAT_ID,
                "message_id": message_id,
                "text": f"üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä—ã–Ω–æ–∫... {progress_percent}%"
            })
        print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {i}/{total}")

    top_changes = sorted(changes, key=lambda x: x[1], reverse=True)[:n]
    return "üìà –¢–æ–ø —Ç—Ä–µ–Ω–¥–æ–≤ –∑–∞ 10 –º–∏–Ω—É—Ç:\n" + "\n".join([f"{s}: {p:.2f}%" for s, p in top_changes])


# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø-5 –∞–∫—Ç–∏–≤–æ–≤ –ø–æ —Ä–æ—Å—Ç—É
def get_top_gainers():
    tickers = binance_client.get_ticker()
    changes = [(t['symbol'], float(t['priceChangePercent'])) for t in tickers if t['symbol'].endswith("USDT")]
    top_gainers = sorted(changes, key=lambda x: x[1], reverse=True)[:5]
    return "üî• –¢–æ–ø-5 –∞–∫—Ç–∏–≤–æ–≤ –ø–æ —Ä–æ—Å—Ç—É:\n" + "\n".join([f"{s}: {p:.2f}%" for s, p in top_gainers])

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø-5 –∞–∫—Ç–∏–≤–æ–≤ –ø–æ –ø–∞–¥–µ–Ω–∏—é
def get_top_losers():
    tickers = binance_client.get_ticker()
    changes = [(t['symbol'], float(t['priceChangePercent'])) for t in tickers if t['symbol'].endswith("USDT")]
    top_losers = sorted(changes, key=lambda x: x[1])[:5]
    return "üìâ –¢–æ–ø-5 –∞–∫—Ç–∏–≤–æ–≤ –ø–æ –ø–∞–¥–µ–Ω–∏—é:\n" + "\n".join([f"{s}: {p:.2f}%" for s, p in top_losers])

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ (–∑–∞–≥–ª—É—à–∫–∞, –º–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å Matplotlib)
def get_chart(symbol):
    try:
        klines = binance_client.get_klines(symbol=symbol, interval=Client.KLINE_INTERVAL_1HOUR, limit=24)
        prices = [float(k[4]) for k in klines]
        timestamps = [i for i in range(len(prices))]

        plt.figure(figsize=(8, 4))
        plt.plot(timestamps, prices, marker='o', linestyle='-')
        plt.xlabel("–ß–∞—Å—ã")
        plt.ylabel("–¶–µ–Ω–∞ (USDT)")
        plt.title(f"–ì—Ä–∞—Ñ–∏–∫ {symbol} –∑–∞ 24 —á–∞—Å–∞")
        plt.grid()

        img = io.BytesIO()
        plt.savefig(img, format='png')
        img.seek(0)
        plt.close()

        return img
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: {e}"

# –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞ (–∑–∞–≥–ª—É—à–∫–∞)
def set_alert(symbol, price):
    return f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {symbol} –ø—Ä–∏ {price} USDT (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)"

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
def get_settings():
    return f"‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n- –ü–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã: {PRICE_CHANGE_THRESHOLD}%\n- –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {CHECK_INTERVAL} —Å–µ–∫"

# –§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
def set_settings(threshold, interval):
    global PRICE_CHANGE_THRESHOLD, CHECK_INTERVAL
    PRICE_CHANGE_THRESHOLD = float(threshold)
    CHECK_INTERVAL = int(interval)
    return "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!"

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ Telegram
@telegram_bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    telegram_bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "üîπ /price SYMBOL - –£–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∞–∫—Ç–∏–≤–∞ (–ø—Ä–∏–º–µ—Ä: /price BTCUSDT)\n"
        "üîπ /chart SYMBOL - –ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã –∑–∞ 24 —á–∞—Å–∞ (–ø—Ä–∏–º–µ—Ä: /chart BTCUSDT)\n"
        "üîπ /trending - –¢—Ä–µ–Ω–¥—ã —Ä—ã–Ω–∫–∞\n"
        "üîπ /alert SYMBOL PRICE - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–Ω—ã (–ø—Ä–∏–º–µ—Ä: /alert BTCUSDT 50000)\n"
        "üîπ /settings - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
        "üîπ /set THRESHOLD INTERVAL - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ä–æ–≥ –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª (–ø—Ä–∏–º–µ—Ä: /set 5 120)")

@telegram_bot.message_handler(commands=['price'])
def send_price(message):
    try:
        symbol = message.text.split()[1].upper()
        response = get_price(symbol)
    except IndexError:
        response = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–∏–º–≤–æ–ª –∞–∫—Ç–∏–≤–∞ (–ø—Ä–∏–º–µ—Ä: /price BTCUSDT)"
    telegram_bot.reply_to(message, response)

@telegram_bot.message_handler(commands=['chart'])
def send_chart(message):
    try:
        symbol = message.text.split()[1].upper()
        img = get_chart(symbol)
        if isinstance(img, str):
            telegram_bot.reply_to(message, img)
        else:
            telegram_bot.send_photo(message.chat.id, img)
    except IndexError:
        response = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–∏–º–≤–æ–ª –∞–∫—Ç–∏–≤–∞ (–ø—Ä–∏–º–µ—Ä: /chart BTCUSDT)"
        telegram_bot.reply_to(message, response)

@telegram_bot.message_handler(commands=['trending'])
def send_trending(message):
    gainers = get_top_gainers()
    losers = get_top_losers()
    response = f"{gainers}\n\n{losers}"
    telegram_bot.reply_to(message, response)

@telegram_bot.message_handler(commands=['alert'])
def send_alert(message):
    try:
        _, symbol, price = message.text.split()
        response = set_alert(symbol.upper(), price)
    except ValueError:
        response = "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /alert SYMBOL PRICE (–ø—Ä–∏–º–µ—Ä: /alert BTCUSDT 50000)"
    telegram_bot.reply_to(message, response)

@telegram_bot.message_handler(commands=['settings'])
def send_settings(message):
    response = get_settings()
    telegram_bot.reply_to(message, response)


@telegram_bot.message_handler(commands=['trend_last'])
def send_trend_last(message):
    try:
        n = int(message.text.split()[1])
        response = get_trend_last(n)
    except (IndexError, ValueError):
        response = "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /trend_last [n] (–ø—Ä–∏–º–µ—Ä: /trend_last 5)"
    telegram_bot.reply_to(message, response)


@telegram_bot.message_handler(commands=['set'])
def change_settings(message):
    try:
        _, threshold, interval = message.text.split()
        response = set_settings(threshold, interval)
    except ValueError:
        response = "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set THRESHOLD INTERVAL (–ø—Ä–∏–º–µ—Ä: /set 5 120)"
    telegram_bot.reply_to(message, response)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    telegram_bot.polling(none_stop=True)
